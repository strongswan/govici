// Copyright (C) 2021 Nick Rosbrook
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// Package vici implements a strongSwan vici protocol client. The Go package is
// documented here. For a complete overview and specification of the vici
// protocol visit:
//
//	https://www.strongswan.org/apidoc/md_src_libcharon_plugins_vici_README.html
//
// The vici package has two important types that the API is built around. The
// first is the Session type, which provides communication to the charon daemon
// over the VICI protocol. This type provides methods for invoking commands on
// the daemon, and subscribing to server-issued events. Second is the Message
// type, which provides an abstraction of the data format transmitted over
// VICI. The Message type is essentially a map, where values can be either a
// string, list of strings ([]string), or a section/sub-message (*Message). The
// contents of a Message are most conveniently managed by creating a struct
// analogous to the message you need to send or receive in a command, and using
// the MarshalMessage and UnmarshalMessage functions with that struct. There
// are however, Get, Set, and Unset methods on the Message type for simpler
// messages.
//
// In order to use this package, it is important to have a basic understanding
// of the VICI protocol as desribed in the link above. The 'Client-initiated
// Commands' section describes all of the available commands you can invoke
// using a Session.  They are invoked by name, exactly as written in that
// document (excluding the parenthesis). For example, if you wanted to call
// the 'reload-settings' command, you would pass the string "reload-settings"
// as the first argument to Session.CommandRequest. Each command has its IN
// and OUT message parameters defined, i.e.:
//
//	{
//	    <message IN parameters>
//	} => {
//	    <message OUT parameters>
//	}
//
// The Message that defines the IN parameters is passed as the second argument
// to Session.CommandRequest. If no IN parameters are required, you can
// safely pass nil instead. The Message returned by Session.CommandRequest will
// contain fields defined by the OUT parameters. Again, the Message type supports
// marshalling with the MarshalMessage and UnmarshalMessage functions. See the
// MarshalMessage function documentation for details.
//
// Some commands will stream events while the command is active, such as the
// "list-sas" command. For such commands, the VICI protocol defines the event
// type that is streamed for the command. In the case of the "list-sas" command,
// the server will stream "list-sa" events. To invoke this type of command, use
// the Session.StreamedCommandRequest method, which accepts the event name as an
// argument in addition to the command name and IN message. For example, calling
// Session.StreamedCommandRequest("list-sas", "list-sa", msg) will return a list
// of messages including all "list-sa" events and the final response message.
//
// In addition to Client-initiated commands, the VICI protocol has a
// server-issued events feature. An event is just a named message generated by
// the server, which is sent to any clients that have subscribed to that event
// type. The 'Server-issued events' section of the VICI protocol documentation
// lists all of the events that can be generated by the server, along with
// associated message parameters. The Session.Subscribe and Session.Unsubscribe
// methods are used to control which events the client will receive. For
// example, a client can subscribe to the 'ike-updown' and 'child-updown'
// events by calling Session.Subscribe("ike-updown", "child-updown"). To receive
// events, register a channel with Session.NotifyEvents.
//
// For information on the semantics of VICI message parameters and how they
// control the strongSwan configuration, see the swanctl.conf documentation:
//
//	https://wiki.strongswan.org/projects/strongswan/wiki/Swanctlconf
package vici
